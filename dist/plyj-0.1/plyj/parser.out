Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    BLOCK_COMMENT
    LINE_COMMENT

Grammar

Rule 0     S' -> goal
Rule 1     expression -> assignment_expression
Rule 2     expression_not_name -> assignment_expression_not_name
Rule 3     assignment_expression -> assignment
Rule 4     assignment_expression -> conditional_expression
Rule 5     assignment_expression_not_name -> assignment
Rule 6     assignment_expression_not_name -> conditional_expression_not_name
Rule 7     assignment -> postfix_expression assignment_operator assignment_expression
Rule 8     assignment_operator -> =
Rule 9     assignment_operator -> TIMES_ASSIGN
Rule 10    assignment_operator -> DIVIDE_ASSIGN
Rule 11    assignment_operator -> REMAINDER_ASSIGN
Rule 12    assignment_operator -> PLUS_ASSIGN
Rule 13    assignment_operator -> MINUS_ASSIGN
Rule 14    assignment_operator -> LSHIFT_ASSIGN
Rule 15    assignment_operator -> RSHIFT_ASSIGN
Rule 16    assignment_operator -> RRSHIFT_ASSIGN
Rule 17    assignment_operator -> AND_ASSIGN
Rule 18    assignment_operator -> OR_ASSIGN
Rule 19    assignment_operator -> XOR_ASSIGN
Rule 20    conditional_expression -> conditional_or_expression
Rule 21    conditional_expression -> conditional_or_expression ? expression : conditional_expression
Rule 22    conditional_expression_not_name -> conditional_or_expression_not_name
Rule 23    conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression
Rule 24    conditional_expression_not_name -> name ? expression : conditional_expression
Rule 25    conditional_or_expression -> conditional_and_expression
Rule 26    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 27    conditional_or_expression_not_name -> conditional_and_expression_not_name
Rule 28    conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression
Rule 29    conditional_or_expression_not_name -> name OR conditional_and_expression
Rule 30    conditional_and_expression -> inclusive_or_expression
Rule 31    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 32    conditional_and_expression_not_name -> inclusive_or_expression_not_name
Rule 33    conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression
Rule 34    conditional_and_expression_not_name -> name AND inclusive_or_expression
Rule 35    inclusive_or_expression -> exclusive_or_expression
Rule 36    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 37    inclusive_or_expression_not_name -> exclusive_or_expression_not_name
Rule 38    inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression
Rule 39    inclusive_or_expression_not_name -> name | exclusive_or_expression
Rule 40    exclusive_or_expression -> and_expression
Rule 41    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 42    exclusive_or_expression_not_name -> and_expression_not_name
Rule 43    exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression
Rule 44    exclusive_or_expression_not_name -> name ^ and_expression
Rule 45    and_expression -> equality_expression
Rule 46    and_expression -> and_expression & equality_expression
Rule 47    and_expression_not_name -> equality_expression_not_name
Rule 48    and_expression_not_name -> and_expression_not_name & equality_expression
Rule 49    and_expression_not_name -> name & equality_expression
Rule 50    equality_expression -> instanceof_expression
Rule 51    equality_expression -> equality_expression EQ instanceof_expression
Rule 52    equality_expression -> equality_expression NEQ instanceof_expression
Rule 53    equality_expression_not_name -> instanceof_expression_not_name
Rule 54    equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression
Rule 55    equality_expression_not_name -> name EQ instanceof_expression
Rule 56    equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression
Rule 57    equality_expression_not_name -> name NEQ instanceof_expression
Rule 58    instanceof_expression -> relational_expression
Rule 59    instanceof_expression -> instanceof_expression INSTANCEOF reference_type
Rule 60    instanceof_expression_not_name -> relational_expression_not_name
Rule 61    instanceof_expression_not_name -> name INSTANCEOF reference_type
Rule 62    instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type
Rule 63    relational_expression -> shift_expression
Rule 64    relational_expression -> relational_expression > shift_expression
Rule 65    relational_expression -> relational_expression < shift_expression
Rule 66    relational_expression -> relational_expression GTEQ shift_expression
Rule 67    relational_expression -> relational_expression LTEQ shift_expression
Rule 68    relational_expression_not_name -> shift_expression_not_name
Rule 69    relational_expression_not_name -> shift_expression_not_name < shift_expression
Rule 70    relational_expression_not_name -> name < shift_expression
Rule 71    relational_expression_not_name -> shift_expression_not_name > shift_expression
Rule 72    relational_expression_not_name -> name > shift_expression
Rule 73    relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression
Rule 74    relational_expression_not_name -> name GTEQ shift_expression
Rule 75    relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression
Rule 76    relational_expression_not_name -> name LTEQ shift_expression
Rule 77    shift_expression -> additive_expression
Rule 78    shift_expression -> shift_expression LSHIFT additive_expression
Rule 79    shift_expression -> shift_expression RSHIFT additive_expression
Rule 80    shift_expression -> shift_expression RRSHIFT additive_expression
Rule 81    shift_expression_not_name -> additive_expression_not_name
Rule 82    shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression
Rule 83    shift_expression_not_name -> name LSHIFT additive_expression
Rule 84    shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression
Rule 85    shift_expression_not_name -> name RSHIFT additive_expression
Rule 86    shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression
Rule 87    shift_expression_not_name -> name RRSHIFT additive_expression
Rule 88    additive_expression -> multiplicative_expression
Rule 89    additive_expression -> additive_expression + multiplicative_expression
Rule 90    additive_expression -> additive_expression - multiplicative_expression
Rule 91    additive_expression_not_name -> multiplicative_expression_not_name
Rule 92    additive_expression_not_name -> additive_expression_not_name + multiplicative_expression
Rule 93    additive_expression_not_name -> name + multiplicative_expression
Rule 94    additive_expression_not_name -> additive_expression_not_name - multiplicative_expression
Rule 95    additive_expression_not_name -> name - multiplicative_expression
Rule 96    multiplicative_expression -> unary_expression
Rule 97    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 98    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 99    multiplicative_expression -> multiplicative_expression % unary_expression
Rule 100   multiplicative_expression_not_name -> unary_expression_not_name
Rule 101   multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression
Rule 102   multiplicative_expression_not_name -> name * unary_expression
Rule 103   multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression
Rule 104   multiplicative_expression_not_name -> name / unary_expression
Rule 105   multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression
Rule 106   multiplicative_expression_not_name -> name % unary_expression
Rule 107   unary_expression -> pre_increment_expression
Rule 108   unary_expression -> pre_decrement_expression
Rule 109   unary_expression -> + unary_expression
Rule 110   unary_expression -> - unary_expression
Rule 111   unary_expression -> unary_expression_not_plus_minus
Rule 112   unary_expression_not_name -> pre_increment_expression
Rule 113   unary_expression_not_name -> pre_decrement_expression
Rule 114   unary_expression_not_name -> + unary_expression
Rule 115   unary_expression_not_name -> - unary_expression
Rule 116   unary_expression_not_name -> unary_expression_not_plus_minus_not_name
Rule 117   pre_increment_expression -> PLUSPLUS unary_expression
Rule 118   pre_decrement_expression -> MINUSMINUS unary_expression
Rule 119   unary_expression_not_plus_minus -> postfix_expression
Rule 120   unary_expression_not_plus_minus -> ~ unary_expression
Rule 121   unary_expression_not_plus_minus -> ! unary_expression
Rule 122   unary_expression_not_plus_minus -> cast_expression
Rule 123   unary_expression_not_plus_minus_not_name -> postfix_expression_not_name
Rule 124   unary_expression_not_plus_minus_not_name -> ~ unary_expression
Rule 125   unary_expression_not_plus_minus_not_name -> ! unary_expression
Rule 126   unary_expression_not_plus_minus_not_name -> cast_expression
Rule 127   postfix_expression -> primary
Rule 128   postfix_expression -> name
Rule 129   postfix_expression -> post_increment_expression
Rule 130   postfix_expression -> post_decrement_expression
Rule 131   postfix_expression_not_name -> primary
Rule 132   postfix_expression_not_name -> post_increment_expression
Rule 133   postfix_expression_not_name -> post_decrement_expression
Rule 134   post_increment_expression -> postfix_expression PLUSPLUS
Rule 135   post_decrement_expression -> postfix_expression MINUSMINUS
Rule 136   primary -> primary_no_new_array
Rule 137   primary -> array_creation_with_array_initializer
Rule 138   primary -> array_creation_without_array_initializer
Rule 139   primary_no_new_array -> literal
Rule 140   primary_no_new_array -> THIS
Rule 141   primary_no_new_array -> class_instance_creation_expression
Rule 142   primary_no_new_array -> field_access
Rule 143   primary_no_new_array -> method_invocation
Rule 144   primary_no_new_array -> array_access
Rule 145   primary_no_new_array -> ( name )
Rule 146   primary_no_new_array -> ( expression_not_name )
Rule 147   primary_no_new_array -> name . THIS
Rule 148   primary_no_new_array -> name . SUPER
Rule 149   primary_no_new_array -> name . CLASS
Rule 150   primary_no_new_array -> name dims . CLASS
Rule 151   primary_no_new_array -> primitive_type dims . CLASS
Rule 152   primary_no_new_array -> primitive_type . CLASS
Rule 153   dims_opt -> dims
Rule 154   dims_opt -> empty
Rule 155   dims -> dims_loop
Rule 156   dims_loop -> one_dim_loop
Rule 157   dims_loop -> dims_loop one_dim_loop
Rule 158   one_dim_loop -> [ ]
Rule 159   cast_expression -> ( primitive_type dims_opt ) unary_expression
Rule 160   cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus
Rule 161   cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
Rule 162   cast_expression -> ( name ) unary_expression_not_plus_minus
Rule 163   cast_expression -> ( name dims ) unary_expression_not_plus_minus
Rule 164   block -> { block_statements_opt }
Rule 165   block_statements_opt -> block_statements
Rule 166   block_statements_opt -> empty
Rule 167   block_statements -> block_statement
Rule 168   block_statements -> block_statements block_statement
Rule 169   block_statement -> local_variable_declaration_statement
Rule 170   block_statement -> statement
Rule 171   block_statement -> class_declaration
Rule 172   block_statement -> interface_declaration
Rule 173   block_statement -> annotation_type_declaration
Rule 174   block_statement -> enum_declaration
Rule 175   local_variable_declaration_statement -> local_variable_declaration ;
Rule 176   local_variable_declaration -> type variable_declarators
Rule 177   local_variable_declaration -> modifiers type variable_declarators
Rule 178   variable_declarators -> variable_declarator
Rule 179   variable_declarators -> variable_declarators , variable_declarator
Rule 180   variable_declarator -> variable_declarator_id
Rule 181   variable_declarator -> variable_declarator_id = variable_initializer
Rule 182   variable_declarator_id -> NAME dims_opt
Rule 183   variable_initializer -> expression
Rule 184   variable_initializer -> array_initializer
Rule 185   statement -> statement_without_trailing_substatement
Rule 186   statement -> labeled_statement
Rule 187   statement -> if_then_statement
Rule 188   statement -> if_then_else_statement
Rule 189   statement -> while_statement
Rule 190   statement -> for_statement
Rule 191   statement -> enhanced_for_statement
Rule 192   statement_without_trailing_substatement -> block
Rule 193   statement_without_trailing_substatement -> expression_statement
Rule 194   statement_without_trailing_substatement -> assert_statement
Rule 195   statement_without_trailing_substatement -> empty_statement
Rule 196   statement_without_trailing_substatement -> switch_statement
Rule 197   statement_without_trailing_substatement -> do_statement
Rule 198   statement_without_trailing_substatement -> break_statement
Rule 199   statement_without_trailing_substatement -> continue_statement
Rule 200   statement_without_trailing_substatement -> return_statement
Rule 201   statement_without_trailing_substatement -> synchronized_statement
Rule 202   statement_without_trailing_substatement -> throw_statement
Rule 203   statement_without_trailing_substatement -> try_statement
Rule 204   statement_without_trailing_substatement -> try_statement_with_resources
Rule 205   expression_statement -> statement_expression ;
Rule 206   expression_statement -> explicit_constructor_invocation
Rule 207   statement_expression -> assignment
Rule 208   statement_expression -> pre_increment_expression
Rule 209   statement_expression -> pre_decrement_expression
Rule 210   statement_expression -> post_increment_expression
Rule 211   statement_expression -> post_decrement_expression
Rule 212   statement_expression -> method_invocation
Rule 213   statement_expression -> class_instance_creation_expression
Rule 214   comma_opt -> ,
Rule 215   comma_opt -> empty
Rule 216   array_initializer -> { comma_opt }
Rule 217   array_initializer -> { variable_initializers }
Rule 218   array_initializer -> { variable_initializers , }
Rule 219   variable_initializers -> variable_initializer
Rule 220   variable_initializers -> variable_initializers , variable_initializer
Rule 221   method_invocation -> NAME ( argument_list_opt )
Rule 222   method_invocation -> name . type_arguments NAME ( argument_list_opt )
Rule 223   method_invocation -> primary . type_arguments NAME ( argument_list_opt )
Rule 224   method_invocation -> SUPER . type_arguments NAME ( argument_list_opt )
Rule 225   method_invocation -> name . NAME ( argument_list_opt )
Rule 226   method_invocation -> primary . NAME ( argument_list_opt )
Rule 227   method_invocation -> SUPER . NAME ( argument_list_opt )
Rule 228   labeled_statement -> label : statement
Rule 229   labeled_statement_no_short_if -> label : statement_no_short_if
Rule 230   label -> NAME
Rule 231   if_then_statement -> IF ( expression ) statement
Rule 232   if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement
Rule 233   if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if ELSE statement_no_short_if
Rule 234   while_statement -> WHILE ( expression ) statement
Rule 235   while_statement_no_short_if -> WHILE ( expression ) statement_no_short_if
Rule 236   for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
Rule 237   for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
Rule 238   for_init_opt -> for_init
Rule 239   for_init_opt -> empty
Rule 240   for_init -> statement_expression_list
Rule 241   for_init -> local_variable_declaration
Rule 242   statement_expression_list -> statement_expression
Rule 243   statement_expression_list -> statement_expression_list , statement_expression
Rule 244   expression_opt -> expression
Rule 245   expression_opt -> empty
Rule 246   for_update_opt -> for_update
Rule 247   for_update_opt -> empty
Rule 248   for_update -> statement_expression_list
Rule 249   enhanced_for_statement -> enhanced_for_statement_header statement
Rule 250   enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if
Rule 251   enhanced_for_statement_header -> enhanced_for_statement_header_init : expression )
Rule 252   enhanced_for_statement_header_init -> FOR ( type NAME dims_opt
Rule 253   enhanced_for_statement_header_init -> FOR ( modifiers type NAME dims_opt
Rule 254   statement_no_short_if -> statement_without_trailing_substatement
Rule 255   statement_no_short_if -> labeled_statement_no_short_if
Rule 256   statement_no_short_if -> if_then_else_statement_no_short_if
Rule 257   statement_no_short_if -> while_statement_no_short_if
Rule 258   statement_no_short_if -> for_statement_no_short_if
Rule 259   statement_no_short_if -> enhanced_for_statement_no_short_if
Rule 260   assert_statement -> ASSERT expression ;
Rule 261   assert_statement -> ASSERT expression : expression ;
Rule 262   empty_statement -> ;
Rule 263   switch_statement -> SWITCH ( expression ) switch_block
Rule 264   switch_block -> { }
Rule 265   switch_block -> { switch_block_statements }
Rule 266   switch_block -> { switch_labels }
Rule 267   switch_block -> { switch_block_statements switch_labels }
Rule 268   switch_block_statements -> switch_block_statement
Rule 269   switch_block_statements -> switch_block_statements switch_block_statement
Rule 270   switch_block_statement -> switch_labels block_statements
Rule 271   switch_labels -> switch_label
Rule 272   switch_labels -> switch_labels switch_label
Rule 273   switch_label -> CASE constant_expression :
Rule 274   switch_label -> DEFAULT :
Rule 275   constant_expression -> expression
Rule 276   do_statement -> DO statement WHILE ( expression ) ;
Rule 277   break_statement -> BREAK ;
Rule 278   break_statement -> BREAK NAME ;
Rule 279   continue_statement -> CONTINUE ;
Rule 280   continue_statement -> CONTINUE NAME ;
Rule 281   return_statement -> RETURN expression_opt ;
Rule 282   synchronized_statement -> SYNCHRONIZED ( expression ) block
Rule 283   throw_statement -> THROW expression ;
Rule 284   try_statement -> TRY try_block catches
Rule 285   try_statement -> TRY try_block catches_opt finally
Rule 286   try_block -> block
Rule 287   catches -> catch_clause
Rule 288   catches -> catches catch_clause
Rule 289   catches_opt -> catches
Rule 290   catches_opt -> empty
Rule 291   catch_clause -> CATCH ( catch_formal_parameter ) block
Rule 292   catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id
Rule 293   catch_type -> union_type
Rule 294   union_type -> type
Rule 295   union_type -> union_type | type
Rule 296   try_statement_with_resources -> TRY resource_specification try_block catches_opt
Rule 297   try_statement_with_resources -> TRY resource_specification try_block catches_opt finally
Rule 298   resource_specification -> ( resources semi_opt )
Rule 299   semi_opt -> ;
Rule 300   semi_opt -> empty
Rule 301   resources -> resource
Rule 302   resources -> resources trailing_semicolon resource
Rule 303   trailing_semicolon -> ;
Rule 304   resource -> type variable_declarator_id = variable_initializer
Rule 305   resource -> modifiers type variable_declarator_id = variable_initializer
Rule 306   finally -> FINALLY block
Rule 307   explicit_constructor_invocation -> THIS ( argument_list_opt ) ;
Rule 308   explicit_constructor_invocation -> SUPER ( argument_list_opt ) ;
Rule 309   explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ;
Rule 310   explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ;
Rule 311   explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ;
Rule 312   explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ;
Rule 313   explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ;
Rule 314   explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ;
Rule 315   explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ;
Rule 316   explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ;
Rule 317   explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ;
Rule 318   explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ;
Rule 319   class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 320   class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt
Rule 321   class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 322   class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt
Rule 323   class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
Rule 324   class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 325   class_instance_creation_expression_name -> name .
Rule 326   class_body_opt -> class_body
Rule 327   class_body_opt -> empty
Rule 328   field_access -> primary . NAME
Rule 329   field_access -> SUPER . NAME
Rule 330   array_access -> name [ expression ]
Rule 331   array_access -> primary_no_new_array [ expression ]
Rule 332   array_access -> array_creation_with_array_initializer [ expression ]
Rule 333   array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer
Rule 334   array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer
Rule 335   dim_with_or_without_exprs -> dim_with_or_without_expr
Rule 336   dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr
Rule 337   dim_with_or_without_expr -> [ expression ]
Rule 338   dim_with_or_without_expr -> [ ]
Rule 339   array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs
Rule 340   array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs
Rule 341   name -> simple_name
Rule 342   name -> qualified_name
Rule 343   simple_name -> NAME
Rule 344   qualified_name -> name . simple_name
Rule 345   literal -> NUM
Rule 346   literal -> CHAR_LITERAL
Rule 347   literal -> STRING_LITERAL
Rule 348   literal -> TRUE
Rule 349   literal -> FALSE
Rule 350   literal -> NULL
Rule 351   modifiers_opt -> modifiers
Rule 352   modifiers_opt -> empty
Rule 353   modifiers -> modifier
Rule 354   modifiers -> modifiers modifier
Rule 355   modifier -> PUBLIC
Rule 356   modifier -> PROTECTED
Rule 357   modifier -> PRIVATE
Rule 358   modifier -> STATIC
Rule 359   modifier -> ABSTRACT
Rule 360   modifier -> FINAL
Rule 361   modifier -> NATIVE
Rule 362   modifier -> SYNCHRONIZED
Rule 363   modifier -> TRANSIENT
Rule 364   modifier -> VOLATILE
Rule 365   modifier -> STRICTFP
Rule 366   modifier -> annotation
Rule 367   type -> primitive_type
Rule 368   type -> reference_type
Rule 369   primitive_type -> BOOLEAN
Rule 370   primitive_type -> VOID
Rule 371   primitive_type -> BYTE
Rule 372   primitive_type -> SHORT
Rule 373   primitive_type -> INT
Rule 374   primitive_type -> LONG
Rule 375   primitive_type -> CHAR
Rule 376   primitive_type -> FLOAT
Rule 377   primitive_type -> DOUBLE
Rule 378   reference_type -> class_or_interface_type
Rule 379   reference_type -> array_type
Rule 380   class_or_interface_type -> class_or_interface
Rule 381   class_or_interface_type -> generic_type
Rule 382   class_type -> class_or_interface_type
Rule 383   class_or_interface -> name
Rule 384   class_or_interface -> generic_type . name
Rule 385   generic_type -> class_or_interface type_arguments
Rule 386   generic_type -> class_or_interface < >
Rule 387   array_type -> primitive_type dims
Rule 388   array_type -> name dims
Rule 389   array_type -> generic_type dims
Rule 390   array_type -> generic_type . name dims
Rule 391   type_arguments -> < type_argument_list1
Rule 392   type_argument_list1 -> type_argument1
Rule 393   type_argument_list1 -> type_argument_list , type_argument1
Rule 394   type_argument_list -> type_argument
Rule 395   type_argument_list -> type_argument_list , type_argument
Rule 396   type_argument -> reference_type
Rule 397   type_argument -> wildcard
Rule 398   type_argument1 -> reference_type1
Rule 399   type_argument1 -> wildcard1
Rule 400   reference_type1 -> reference_type >
Rule 401   reference_type1 -> class_or_interface < type_argument_list2
Rule 402   type_argument_list2 -> type_argument2
Rule 403   type_argument_list2 -> type_argument_list , type_argument2
Rule 404   type_argument2 -> reference_type2
Rule 405   type_argument2 -> wildcard2
Rule 406   reference_type2 -> reference_type RSHIFT
Rule 407   reference_type2 -> class_or_interface < type_argument_list3
Rule 408   type_argument_list3 -> type_argument3
Rule 409   type_argument_list3 -> type_argument_list , type_argument3
Rule 410   type_argument3 -> reference_type3
Rule 411   type_argument3 -> wildcard3
Rule 412   reference_type3 -> reference_type RRSHIFT
Rule 413   wildcard -> ?
Rule 414   wildcard -> ? wildcard_bounds
Rule 415   wildcard_bounds -> EXTENDS reference_type
Rule 416   wildcard_bounds -> SUPER reference_type
Rule 417   wildcard1 -> ? >
Rule 418   wildcard1 -> ? wildcard_bounds1
Rule 419   wildcard_bounds1 -> EXTENDS reference_type1
Rule 420   wildcard_bounds1 -> SUPER reference_type1
Rule 421   wildcard2 -> ? RSHIFT
Rule 422   wildcard2 -> ? wildcard_bounds2
Rule 423   wildcard_bounds2 -> EXTENDS reference_type2
Rule 424   wildcard_bounds2 -> SUPER reference_type2
Rule 425   wildcard3 -> ? RRSHIFT
Rule 426   wildcard3 -> ? wildcard_bounds3
Rule 427   wildcard_bounds3 -> EXTENDS reference_type3
Rule 428   wildcard_bounds3 -> SUPER reference_type3
Rule 429   type_parameter_header -> NAME
Rule 430   type_parameters -> < type_parameter_list1
Rule 431   type_parameter_list -> type_parameter
Rule 432   type_parameter_list -> type_parameter_list , type_parameter
Rule 433   type_parameter -> type_parameter_header
Rule 434   type_parameter -> type_parameter_header EXTENDS reference_type
Rule 435   type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list
Rule 436   additional_bound_list -> additional_bound
Rule 437   additional_bound_list -> additional_bound_list additional_bound
Rule 438   additional_bound -> & reference_type
Rule 439   type_parameter_list1 -> type_parameter1
Rule 440   type_parameter_list1 -> type_parameter_list , type_parameter1
Rule 441   type_parameter1 -> type_parameter_header >
Rule 442   type_parameter1 -> type_parameter_header EXTENDS reference_type1
Rule 443   type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1
Rule 444   additional_bound_list1 -> additional_bound1
Rule 445   additional_bound_list1 -> additional_bound_list additional_bound1
Rule 446   additional_bound1 -> & reference_type1
Rule 447   type_declaration -> class_declaration
Rule 448   type_declaration -> interface_declaration
Rule 449   type_declaration -> enum_declaration
Rule 450   type_declaration -> annotation_type_declaration
Rule 451   type_declaration -> ;
Rule 452   class_declaration -> class_header class_body
Rule 453   class_header -> class_header_name class_header_extends_opt class_header_implements_opt
Rule 454   class_header_name -> class_header_name1 type_parameters
Rule 455   class_header_name -> class_header_name1
Rule 456   class_header_name1 -> modifiers_opt CLASS NAME
Rule 457   class_header_extends_opt -> class_header_extends
Rule 458   class_header_extends_opt -> empty
Rule 459   class_header_extends -> EXTENDS class_type
Rule 460   class_header_implements_opt -> class_header_implements
Rule 461   class_header_implements_opt -> empty
Rule 462   class_header_implements -> IMPLEMENTS interface_type_list
Rule 463   interface_type_list -> interface_type
Rule 464   interface_type_list -> interface_type_list , interface_type
Rule 465   interface_type -> class_or_interface_type
Rule 466   class_body -> { class_body_declarations_opt }
Rule 467   class_body_declarations_opt -> class_body_declarations
Rule 468   class_body_declarations_opt -> empty
Rule 469   class_body_declarations -> class_body_declaration
Rule 470   class_body_declarations -> class_body_declarations class_body_declaration
Rule 471   class_body_declaration -> class_member_declaration
Rule 472   class_body_declaration -> static_initializer
Rule 473   class_body_declaration -> constructor_declaration
Rule 474   class_body_declaration -> block
Rule 475   class_member_declaration -> field_declaration
Rule 476   class_member_declaration -> class_declaration
Rule 477   class_member_declaration -> method_declaration
Rule 478   class_member_declaration -> interface_declaration
Rule 479   class_member_declaration -> enum_declaration
Rule 480   class_member_declaration -> annotation_type_declaration
Rule 481   class_member_declaration -> ;
Rule 482   field_declaration -> modifiers_opt type variable_declarators ;
Rule 483   static_initializer -> STATIC block
Rule 484   constructor_declaration -> constructor_header method_body
Rule 485   constructor_header -> constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
Rule 486   constructor_header_name -> modifiers_opt type_parameters NAME (
Rule 487   constructor_header_name -> modifiers_opt NAME (
Rule 488   formal_parameter_list_opt -> formal_parameter_list
Rule 489   formal_parameter_list_opt -> empty
Rule 490   formal_parameter_list -> formal_parameter
Rule 491   formal_parameter_list -> formal_parameter_list , formal_parameter
Rule 492   formal_parameter -> modifiers_opt type variable_declarator_id
Rule 493   formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id
Rule 494   method_header_throws_clause_opt -> method_header_throws_clause
Rule 495   method_header_throws_clause_opt -> empty
Rule 496   method_header_throws_clause -> THROWS class_type_list
Rule 497   class_type_list -> class_type_elt
Rule 498   class_type_list -> class_type_list , class_type_elt
Rule 499   class_type_elt -> class_type
Rule 500   method_body -> { block_statements_opt }
Rule 501   method_declaration -> abstract_method_declaration
Rule 502   method_declaration -> method_header method_body
Rule 503   abstract_method_declaration -> method_header ;
Rule 504   method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
Rule 505   method_header_name -> modifiers_opt type_parameters type NAME (
Rule 506   method_header_name -> modifiers_opt type NAME (
Rule 507   method_header_extended_dims -> dims_opt
Rule 508   interface_declaration -> interface_header interface_body
Rule 509   interface_header -> interface_header_name interface_header_extends_opt
Rule 510   interface_header_name -> interface_header_name1 type_parameters
Rule 511   interface_header_name -> interface_header_name1
Rule 512   interface_header_name1 -> modifiers_opt INTERFACE NAME
Rule 513   interface_header_extends_opt -> interface_header_extends
Rule 514   interface_header_extends_opt -> empty
Rule 515   interface_header_extends -> EXTENDS interface_type_list
Rule 516   interface_body -> { interface_member_declarations_opt }
Rule 517   interface_member_declarations_opt -> interface_member_declarations
Rule 518   interface_member_declarations_opt -> empty
Rule 519   interface_member_declarations -> interface_member_declaration
Rule 520   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 521   interface_member_declaration -> constant_declaration
Rule 522   interface_member_declaration -> abstract_method_declaration
Rule 523   interface_member_declaration -> class_declaration
Rule 524   interface_member_declaration -> interface_declaration
Rule 525   interface_member_declaration -> enum_declaration
Rule 526   interface_member_declaration -> annotation_type_declaration
Rule 527   interface_member_declaration -> ;
Rule 528   constant_declaration -> field_declaration
Rule 529   enum_declaration -> enum_header enum_body
Rule 530   enum_header -> enum_header_name class_header_implements_opt
Rule 531   enum_header_name -> modifiers_opt ENUM NAME
Rule 532   enum_header_name -> modifiers_opt ENUM NAME type_parameters
Rule 533   enum_body -> { enum_body_declarations_opt }
Rule 534   enum_body -> { , enum_body_declarations_opt }
Rule 535   enum_body -> { enum_constants , enum_body_declarations_opt }
Rule 536   enum_body -> { enum_constants enum_body_declarations_opt }
Rule 537   enum_constants -> enum_constant
Rule 538   enum_constants -> enum_constants , enum_constant
Rule 539   enum_constant -> enum_constant_header class_body
Rule 540   enum_constant -> enum_constant_header
Rule 541   enum_constant_header -> enum_constant_header_name arguments_opt
Rule 542   enum_constant_header_name -> modifiers_opt NAME
Rule 543   arguments_opt -> arguments
Rule 544   arguments_opt -> empty
Rule 545   arguments -> ( argument_list_opt )
Rule 546   argument_list_opt -> argument_list
Rule 547   argument_list_opt -> empty
Rule 548   argument_list -> expression
Rule 549   argument_list -> argument_list , expression
Rule 550   enum_body_declarations_opt -> enum_declarations
Rule 551   enum_body_declarations_opt -> empty
Rule 552   enum_declarations -> ; class_body_declarations_opt
Rule 553   annotation_type_declaration -> annotation_type_declaration_header annotation_type_body
Rule 554   annotation_type_declaration_header -> annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
Rule 555   annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME
Rule 556   annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters
Rule 557   annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters
Rule 558   annotation_type_declaration_header_name -> @ INTERFACE NAME
Rule 559   annotation_type_body -> { annotation_type_member_declarations_opt }
Rule 560   annotation_type_member_declarations_opt -> annotation_type_member_declarations
Rule 561   annotation_type_member_declarations_opt -> empty
Rule 562   annotation_type_member_declarations -> annotation_type_member_declaration
Rule 563   annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration
Rule 564   annotation_type_member_declaration -> annotation_method_header ;
Rule 565   annotation_type_member_declaration -> constant_declaration
Rule 566   annotation_type_member_declaration -> constructor_declaration
Rule 567   annotation_type_member_declaration -> type_declaration
Rule 568   annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt
Rule 569   annotation_method_header_name -> modifiers_opt type_parameters type NAME (
Rule 570   annotation_method_header_name -> modifiers_opt type NAME (
Rule 571   annotation_method_header_default_value_opt -> default_value
Rule 572   annotation_method_header_default_value_opt -> empty
Rule 573   default_value -> DEFAULT member_value
Rule 574   member_value -> conditional_expression_not_name
Rule 575   member_value -> name
Rule 576   member_value -> annotation
Rule 577   member_value -> member_value_array_initializer
Rule 578   member_value_array_initializer -> { member_values , }
Rule 579   member_value_array_initializer -> { member_values }
Rule 580   member_value_array_initializer -> { , }
Rule 581   member_value_array_initializer -> { }
Rule 582   member_values -> member_value
Rule 583   member_values -> member_values , member_value
Rule 584   annotation -> normal_annotation
Rule 585   annotation -> marker_annotation
Rule 586   annotation -> single_member_annotation
Rule 587   normal_annotation -> annotation_name ( member_value_pairs_opt )
Rule 588   annotation_name -> @ name
Rule 589   member_value_pairs_opt -> member_value_pairs
Rule 590   member_value_pairs_opt -> empty
Rule 591   member_value_pairs -> member_value_pair
Rule 592   member_value_pairs -> member_value_pairs , member_value_pair
Rule 593   member_value_pair -> simple_name = member_value
Rule 594   marker_annotation -> annotation_name
Rule 595   single_member_annotation -> annotation_name ( single_member_annotation_member_value )
Rule 596   single_member_annotation_member_value -> member_value
Rule 597   compilation_unit -> package_declaration
Rule 598   compilation_unit -> package_declaration import_declarations
Rule 599   compilation_unit -> package_declaration import_declarations type_declarations
Rule 600   compilation_unit -> package_declaration type_declarations
Rule 601   compilation_unit -> import_declarations
Rule 602   compilation_unit -> type_declarations
Rule 603   compilation_unit -> import_declarations type_declarations
Rule 604   compilation_unit -> empty
Rule 605   package_declaration -> package_declaration_name ;
Rule 606   package_declaration_name -> modifiers PACKAGE name
Rule 607   package_declaration_name -> PACKAGE name
Rule 608   import_declarations -> import_declaration
Rule 609   import_declarations -> import_declarations import_declaration
Rule 610   import_declaration -> single_type_import_declaration
Rule 611   import_declaration -> type_import_on_demand_declaration
Rule 612   import_declaration -> single_static_import_declaration
Rule 613   import_declaration -> static_import_on_demand_declaration
Rule 614   single_type_import_declaration -> IMPORT name ;
Rule 615   type_import_on_demand_declaration -> IMPORT name . * ;
Rule 616   single_static_import_declaration -> IMPORT STATIC name ;
Rule 617   static_import_on_demand_declaration -> IMPORT STATIC name . * ;
Rule 618   type_declarations -> type_declaration
Rule 619   type_declarations -> type_declarations type_declaration
Rule 620   goal -> PLUSPLUS compilation_unit
Rule 621   goal -> MINUSMINUS expression
Rule 622   goal -> * block_statement
Rule 623   empty -> <empty>

Terminals, with rules where they appear

!                    : 121 125
%                    : 99 105 106
&                    : 46 48 49 438 446
(                    : 145 146 159 160 161 162 163 221 222 223 224 225 226 227 231 232 233 234 235 236 237 252 253 263 276 282 291 298 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 486 487 505 506 545 569 570 587 595
)                    : 145 146 159 160 161 162 163 221 222 223 224 225 226 227 231 232 233 234 235 236 237 251 263 276 282 291 298 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 485 504 545 568 587 595
*                    : 97 101 102 615 617 622
+                    : 89 92 93 109 114
,                    : 179 214 218 220 243 393 395 403 409 432 440 464 491 498 534 535 538 549 578 580 583 592
-                    : 90 94 95 110 115
.                    : 147 148 149 150 151 152 161 222 223 224 225 226 227 311 312 313 314 315 316 317 318 321 322 325 328 329 344 384 390 615 617
/                    : 98 103 104
:                    : 21 23 24 228 229 251 261 273 274
;                    : 175 205 236 236 237 237 260 261 262 276 277 278 279 280 281 283 299 303 307 308 309 310 311 312 313 314 315 316 317 318 451 481 482 503 527 552 564 605 614 615 616 617
<                    : 65 69 70 386 391 401 407 430
=                    : 8 181 304 305 593
>                    : 64 71 72 386 400 417 441
?                    : 21 23 24 413 414 417 418 421 422 425 426
@                    : 555 556 557 558 588
ABSTRACT             : 359
AND                  : 31 33 34
AND_ASSIGN           : 17
ASSERT               : 260 261
BLOCK_COMMENT        : 
BOOLEAN              : 369
BREAK                : 277 278
BYTE                 : 371
CASE                 : 273
CATCH                : 291
CHAR                 : 375
CHAR_LITERAL         : 346
CLASS                : 149 150 151 152 456
CONTINUE             : 279 280
DEFAULT              : 274 573
DIVIDE_ASSIGN        : 10
DO                   : 276
DOUBLE               : 377
ELLIPSIS             : 493
ELSE                 : 232 233
ENUM                 : 531 532
EQ                   : 51 54 55
EXTENDS              : 415 419 423 427 434 435 442 443 459 515
FALSE                : 349
FINAL                : 360
FINALLY              : 306
FLOAT                : 376
FOR                  : 236 237 252 253
GTEQ                 : 66 73 74
IF                   : 231 232 233
IMPLEMENTS           : 462
IMPORT               : 614 615 616 617
INSTANCEOF           : 59 61 62
INT                  : 373
INTERFACE            : 512 555 556 557 558
LINE_COMMENT         : 
LONG                 : 374
LSHIFT               : 78 82 83
LSHIFT_ASSIGN        : 14
LTEQ                 : 67 75 76
MINUSMINUS           : 118 135 621
MINUS_ASSIGN         : 13
NAME                 : 182 221 222 223 224 225 226 227 230 252 253 278 280 328 329 343 429 456 486 487 505 506 512 531 532 542 555 556 557 558 569 570
NATIVE               : 361
NEQ                  : 52 56 57
NEW                  : 319 320 321 322 323 324 333 334 339 340
NULL                 : 350
NUM                  : 345
OR                   : 26 28 29
OR_ASSIGN            : 18
PACKAGE              : 606 607
PLUSPLUS             : 117 134 620
PLUS_ASSIGN          : 12
PRIVATE              : 357
PROTECTED            : 356
PUBLIC               : 355
REMAINDER_ASSIGN     : 11
RETURN               : 281
RRSHIFT              : 80 86 87 412 425
RRSHIFT_ASSIGN       : 16
RSHIFT               : 79 84 85 406 421
RSHIFT_ASSIGN        : 15
SHORT                : 372
STATIC               : 358 483 616 617
STRICTFP             : 365
STRING_LITERAL       : 347
SUPER                : 148 224 227 308 309 311 312 315 316 329 416 420 424 428
SWITCH               : 263
SYNCHRONIZED         : 282 362
THIS                 : 140 147 307 310 313 314 317 318
THROW                : 283
THROWS               : 496
TIMES_ASSIGN         : 9
TRANSIENT            : 363
TRUE                 : 348
TRY                  : 284 285 296 297
VOID                 : 370
VOLATILE             : 364
WHILE                : 234 235 276
XOR_ASSIGN           : 19
[                    : 158 330 331 332 337 338
]                    : 158 330 331 332 337 338
^                    : 41 43 44
error                : 
{                    : 164 216 217 218 264 265 266 267 466 500 516 533 534 535 536 559 578 579 580 581
|                    : 36 38 39 295
}                    : 164 216 217 218 264 265 266 267 466 500 516 533 534 535 536 559 578 579 580 581
~                    : 120 124

Nonterminals, with rules where they appear

abstract_method_declaration : 501 522
additional_bound     : 436 437
additional_bound1    : 444 445
additional_bound_list : 435 437 445
additional_bound_list1 : 443
additive_expression  : 77 78 79 80 82 83 84 85 86 87 89 90
additive_expression_not_name : 81 92 94
and_expression       : 40 41 43 44 46
and_expression_not_name : 42 48
annotation           : 366 576
annotation_method_header : 564
annotation_method_header_default_value_opt : 568
annotation_method_header_name : 568
annotation_name      : 587 594 595
annotation_type_body : 553
annotation_type_declaration : 173 450 480 526
annotation_type_declaration_header : 553
annotation_type_declaration_header_name : 554
annotation_type_member_declaration : 562 563
annotation_type_member_declarations : 560 563
annotation_type_member_declarations_opt : 559
argument_list        : 546 549
argument_list_opt    : 221 222 223 224 225 226 227 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 545
arguments            : 543
arguments_opt        : 541
array_access         : 144
array_creation_with_array_initializer : 137 332
array_creation_without_array_initializer : 138
array_initializer    : 184 333 334
array_type           : 379
assert_statement     : 194
assignment           : 3 5 207
assignment_expression : 1 7
assignment_expression_not_name : 2
assignment_operator  : 7
block                : 192 282 286 291 306 474 483
block_statement      : 167 168 622
block_statements     : 165 168 270
block_statements_opt : 164 500
break_statement      : 198
cast_expression      : 122 126
catch_clause         : 287 288
catch_formal_parameter : 291
catch_type           : 292
catches              : 284 288 289
catches_opt          : 285 296 297
class_body           : 326 452 539
class_body_declaration : 469 470
class_body_declarations : 467 470
class_body_declarations_opt : 466 552
class_body_opt       : 319 320 321 322 323 324
class_declaration    : 171 447 476 523
class_header         : 452
class_header_extends : 457
class_header_extends_opt : 453 554
class_header_implements : 460
class_header_implements_opt : 453 530 554
class_header_name    : 453
class_header_name1   : 454 455
class_instance_creation_expression : 141 213
class_instance_creation_expression_name : 323 324
class_member_declaration : 471
class_or_interface   : 380 385 386 401 407
class_or_interface_type : 161 334 340 378 382 465
class_type           : 319 320 321 322 323 324 459 499
class_type_elt       : 497 498
class_type_list      : 496 498
comma_opt            : 216
compilation_unit     : 620
conditional_and_expression : 25 26 28 29 31
conditional_and_expression_not_name : 27 33
conditional_expression : 4 21 23 24
conditional_expression_not_name : 6 574
conditional_or_expression : 20 21 26
conditional_or_expression_not_name : 22 23 28
constant_declaration : 521 565
constant_expression  : 273
constructor_declaration : 473 566
constructor_header   : 484
constructor_header_name : 485
continue_statement   : 199
default_value        : 571
dim_with_or_without_expr : 335 336
dim_with_or_without_exprs : 333 334 336 339 340
dims                 : 150 151 153 163 387 388 389 390
dims_loop            : 155 157
dims_opt             : 159 160 161 182 252 253 507
do_statement         : 197
empty                : 154 166 215 239 245 247 290 300 327 352 458 461 468 489 495 514 518 544 547 551 561 572 590 604
empty_statement      : 195
enhanced_for_statement : 191
enhanced_for_statement_header : 249 250
enhanced_for_statement_header_init : 251
enhanced_for_statement_no_short_if : 259
enum_body            : 529
enum_body_declarations_opt : 533 534 535 536
enum_constant        : 537 538
enum_constant_header : 539 540
enum_constant_header_name : 541
enum_constants       : 535 536 538
enum_declaration     : 174 449 479 525
enum_declarations    : 550
enum_header          : 529
enum_header_name     : 530
equality_expression  : 45 46 48 49 51 52
equality_expression_not_name : 47 54 56
exclusive_or_expression : 35 36 38 39 41
exclusive_or_expression_not_name : 37 43
explicit_constructor_invocation : 206
expression           : 21 23 24 183 231 232 233 234 235 244 251 260 261 261 263 275 276 282 283 330 331 332 337 548 549 621
expression_not_name  : 146
expression_opt       : 236 237 281
expression_statement : 193
field_access         : 142
field_declaration    : 475 528
finally              : 285 297
for_init             : 238
for_init_opt         : 236 237
for_statement        : 190
for_statement_no_short_if : 258
for_update           : 246
for_update_opt       : 236 237
formal_parameter     : 490 491
formal_parameter_list : 488 491
formal_parameter_list_opt : 485 504 568
generic_type         : 381 384 389 390
goal                 : 0
if_then_else_statement : 188
if_then_else_statement_no_short_if : 256
if_then_statement    : 187
import_declaration   : 608 609
import_declarations  : 598 599 601 603 609
inclusive_or_expression : 30 31 33 34 36
inclusive_or_expression_not_name : 32 38
instanceof_expression : 50 51 52 54 55 56 57 59
instanceof_expression_not_name : 53 62
interface_body       : 508
interface_declaration : 172 448 478 524
interface_header     : 508
interface_header_extends : 513
interface_header_extends_opt : 509
interface_header_name : 509
interface_header_name1 : 510 511
interface_member_declaration : 519 520
interface_member_declarations : 517 520
interface_member_declarations_opt : 516
interface_type       : 463 464
interface_type_list  : 462 464 515
label                : 228 229
labeled_statement    : 186
labeled_statement_no_short_if : 255
literal              : 139
local_variable_declaration : 175 241
local_variable_declaration_statement : 169
marker_annotation    : 585
member_value         : 573 582 583 593 596
member_value_array_initializer : 577
member_value_pair    : 591 592
member_value_pairs   : 589 592
member_value_pairs_opt : 587
member_values        : 578 579 583
method_body          : 484 502
method_declaration   : 477
method_header        : 502 503
method_header_extended_dims : 504 568
method_header_name   : 504
method_header_throws_clause : 494
method_header_throws_clause_opt : 485 504
method_invocation    : 143 212
modifier             : 353 354
modifiers            : 177 253 305 351 354 555 556 606
modifiers_opt        : 292 456 482 486 487 492 493 505 506 512 531 532 542 569 570
multiplicative_expression : 88 89 90 92 93 94 95 97 98 99
multiplicative_expression_not_name : 91 101 103 105
name                 : 24 29 34 39 44 49 55 57 61 70 72 74 76 83 85 87 93 95 102 104 106 128 145 147 148 149 150 160 161 162 163 222 225 312 314 316 318 325 330 344 383 384 388 390 575 588 606 607 614 615 616 617
normal_annotation    : 584
one_dim_loop         : 156 157
package_declaration  : 597 598 599 600
package_declaration_name : 605
post_decrement_expression : 130 133 211
post_increment_expression : 129 132 210
postfix_expression   : 7 119 134 135
postfix_expression_not_name : 123
pre_decrement_expression : 108 113 209
pre_increment_expression : 107 112 208
primary              : 127 131 223 226 311 313 315 317 321 322 328
primary_no_new_array : 136 331
primitive_type       : 151 152 159 333 339 367 387
qualified_name       : 342
reference_type       : 59 61 62 368 396 400 406 412 415 416 434 435 438 443
reference_type1      : 398 419 420 442 446
reference_type2      : 404 423 424
reference_type3      : 410 427 428
relational_expression : 58 64 65 66 67
relational_expression_not_name : 60
resource             : 301 302
resource_specification : 296 297
resources            : 298 302
return_statement     : 200
semi_opt             : 298
shift_expression     : 63 64 65 66 67 69 70 71 72 73 74 75 76 78 79 80
shift_expression_not_name : 68 69 71 73 75 82 84 86
simple_name          : 341 344 593
single_member_annotation : 586
single_member_annotation_member_value : 595
single_static_import_declaration : 612
single_type_import_declaration : 610
statement            : 170 228 231 232 234 236 249 276
statement_expression : 205 242 243
statement_expression_list : 240 243 248
statement_no_short_if : 229 232 233 233 235 237 250
statement_without_trailing_substatement : 185 254
static_import_on_demand_declaration : 613
static_initializer   : 472
switch_block         : 263
switch_block_statement : 268 269
switch_block_statements : 265 267 269
switch_label         : 271 272
switch_labels        : 266 267 270 272
switch_statement     : 196
synchronized_statement : 201
throw_statement      : 202
trailing_semicolon   : 302
try_block            : 284 285 296 297
try_statement        : 203
try_statement_with_resources : 204
type                 : 176 177 252 253 294 295 304 305 482 492 493 505 506 569 570
type_argument        : 394 395
type_argument1       : 392 393
type_argument2       : 402 403
type_argument3       : 408 409
type_argument_list   : 393 395 403 409
type_argument_list1  : 391
type_argument_list2  : 401
type_argument_list3  : 407
type_arguments       : 160 161 222 223 224 309 310 315 316 317 318 319 321 324 385
type_declaration     : 567 618 619
type_declarations    : 599 600 602 603 619
type_import_on_demand_declaration : 611
type_parameter       : 431 432
type_parameter1      : 439 440
type_parameter_header : 433 434 435 441 442 443
type_parameter_list  : 432 440
type_parameter_list1 : 430
type_parameters      : 454 486 505 510 532 556 557 569
unary_expression     : 96 97 98 99 101 102 103 104 105 106 109 110 114 115 117 118 120 121 124 125 159
unary_expression_not_name : 100
unary_expression_not_plus_minus : 111 160 161 162 163
unary_expression_not_plus_minus_not_name : 116
union_type           : 293 295
variable_declarator  : 178 179
variable_declarator_id : 180 181 292 304 305 492 493
variable_declarators : 176 177 179 482
variable_initializer : 181 219 220 304 305
variable_initializers : 217 218 220
while_statement      : 189
while_statement_no_short_if : 257
wildcard             : 397
wildcard1            : 399
wildcard2            : 405
wildcard3            : 411
wildcard_bounds      : 414
wildcard_bounds1     : 418
wildcard_bounds2     : 422
wildcard_bounds3     : 426

Parsing method: LALR
